/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as OpenLedgerClient from "../../api/index";
import * as core from "../../core";
import { ToolResponseType } from "./ToolResponseType";
import { ToolResponseResponseType } from "./ToolResponseResponseType";

export const ToolResponse: core.serialization.ObjectSchema<
    serializers.ToolResponse.Raw,
    OpenLedgerClient.ToolResponse
> = core.serialization.object({
    type: ToolResponseType,
    responseType: ToolResponseResponseType,
    thoughtProcess: core.serialization.string().optional(),
    isFollowUp: core.serialization.boolean().optional(),
    referenceToHistory: core.serialization.string().optional(),
    referenceToUiState: core.serialization.string().optional(),
    toolName: core.serialization.string().optional(),
    toolArgs: core.serialization.unknown().optional(),
    workflowDescription: core.serialization.string().optional(),
    workflowSteps: core.serialization.unknown().optional(),
    reason: core.serialization.string().optional(),
});

export declare namespace ToolResponse {
    export interface Raw {
        type: ToolResponseType.Raw;
        responseType: ToolResponseResponseType.Raw;
        thoughtProcess?: string | null;
        isFollowUp?: boolean | null;
        referenceToHistory?: string | null;
        referenceToUiState?: string | null;
        toolName?: string | null;
        toolArgs?: unknown | null;
        workflowDescription?: string | null;
        workflowSteps?: unknown | null;
        reason?: string | null;
    }
}
