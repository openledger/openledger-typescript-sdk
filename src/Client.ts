/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "./environments";
import * as core from "./core";
import { Transactions } from "./api/resources/transactions/client/Client";
import { Companies } from "./api/resources/companies/client/Client";
import { Categories } from "./api/resources/categories/client/Client";

export declare namespace OpenLedgerClientClient {
    interface Options {
        environment?: core.Supplier<environments.OpenLedgerClientEnvironment | string>;
        token: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
    }

    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}

export class OpenLedgerClientClient {
    constructor(protected readonly _options: OpenLedgerClientClient.Options) {}

    protected _transactions: Transactions | undefined;

    public get transactions(): Transactions {
        return (this._transactions ??= new Transactions(this._options));
    }

    protected _companies: Companies | undefined;

    public get companies(): Companies {
        return (this._companies ??= new Companies(this._options));
    }

    protected _categories: Categories | undefined;

    public get categories(): Categories {
        return (this._categories ??= new Categories(this._options));
    }
}
