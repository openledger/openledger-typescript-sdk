/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as OpenLedgerClient from "../../../index";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization/index";
import * as errors from "../../../../errors/index";

export declare namespace Banks {
    export interface Options {
        environment?: core.Supplier<environments.OpenLedgerClientEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Banks {
    constructor(protected readonly _options: Banks.Options) {}

    /**
     * Creates a new Plaid link token for connecting a bank account
     *
     * @param {OpenLedgerClient.GetV1BanksCreateLinkRequest} request
     * @param {Banks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link OpenLedgerClient.BadRequestError}
     * @throws {@link OpenLedgerClient.InternalServerError}
     *
     * @example
     *     await client.banks.createABankLink({
     *         entityId: "ent_123456"
     *     })
     */
    public createABankLink(
        request: OpenLedgerClient.GetV1BanksCreateLinkRequest,
        requestOptions?: Banks.RequestOptions,
    ): core.HttpResponsePromise<OpenLedgerClient.GetV1BanksCreateLinkResponse> {
        return core.HttpResponsePromise.fromPromise(this.__createABankLink(request, requestOptions));
    }

    private async __createABankLink(
        request: OpenLedgerClient.GetV1BanksCreateLinkRequest,
        requestOptions?: Banks.RequestOptions,
    ): Promise<core.WithRawResponse<OpenLedgerClient.GetV1BanksCreateLinkResponse>> {
        const { entityId } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["entityId"] = entityId;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpenLedgerClientEnvironment.Default,
                "v1/banks/create-link",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "openledger",
                "X-Fern-SDK-Version": "1.0.2",
                "User-Agent": "openledger/1.0.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.GetV1BanksCreateLinkResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new OpenLedgerClient.BadRequestError(_response.error.body, _response.rawResponse);
                case 500:
                    throw new OpenLedgerClient.InternalServerError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.OpenLedgerClientError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpenLedgerClientError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpenLedgerClientTimeoutError(
                    "Timeout exceeded when calling GET /v1/banks/create-link.",
                );
            case "unknown":
                throw new errors.OpenLedgerClientError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Adds new bank accounts using a Plaid public token
     *
     * @param {OpenLedgerClient.PutV1BanksAccountsRequest} request
     * @param {Banks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link OpenLedgerClient.BadRequestError}
     * @throws {@link OpenLedgerClient.InternalServerError}
     *
     * @example
     *     await client.banks.addBankAccounts({
     *         entityId: "ent_123456",
     *         publicToken: "public-sandbox-123456-abcdef"
     *     })
     */
    public addBankAccounts(
        request: OpenLedgerClient.PutV1BanksAccountsRequest,
        requestOptions?: Banks.RequestOptions,
    ): core.HttpResponsePromise<OpenLedgerClient.PutV1BanksAccountsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__addBankAccounts(request, requestOptions));
    }

    private async __addBankAccounts(
        request: OpenLedgerClient.PutV1BanksAccountsRequest,
        requestOptions?: Banks.RequestOptions,
    ): Promise<core.WithRawResponse<OpenLedgerClient.PutV1BanksAccountsResponse>> {
        const { entityId, publicToken } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["entityId"] = entityId;
        _queryParams["public_token"] = publicToken;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpenLedgerClientEnvironment.Default,
                "v1/banks/accounts",
            ),
            method: "PUT",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "openledger",
                "X-Fern-SDK-Version": "1.0.2",
                "User-Agent": "openledger/1.0.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.PutV1BanksAccountsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new OpenLedgerClient.BadRequestError(_response.error.body, _response.rawResponse);
                case 500:
                    throw new OpenLedgerClient.InternalServerError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.OpenLedgerClientError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpenLedgerClientError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpenLedgerClientTimeoutError("Timeout exceeded when calling PUT /v1/banks/accounts.");
            case "unknown":
                throw new errors.OpenLedgerClientError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
