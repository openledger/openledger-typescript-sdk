/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as OpenLedgerClient from "../../../index";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization/index";
import * as errors from "../../../../errors/index";

export declare namespace Transactions {
    export interface Options {
        environment?: core.Supplier<environments.OpenLedgerClientEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Transactions {
    constructor(protected readonly _options: Transactions.Options) {}

    /**
     * Retrieves all transactions for a specific entity with pagination
     *
     * @param {OpenLedgerClient.GetV1TransactionsRequest} request
     * @param {Transactions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link OpenLedgerClient.BadRequestError}
     * @throws {@link OpenLedgerClient.InternalServerError}
     *
     * @example
     *     await client.transactions.getTransactionsByEntity({
     *         entityId: "entityId"
     *     })
     */
    public getTransactionsByEntity(
        request: OpenLedgerClient.GetV1TransactionsRequest,
        requestOptions?: Transactions.RequestOptions,
    ): core.HttpResponsePromise<OpenLedgerClient.GetV1TransactionsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getTransactionsByEntity(request, requestOptions));
    }

    private async __getTransactionsByEntity(
        request: OpenLedgerClient.GetV1TransactionsRequest,
        requestOptions?: Transactions.RequestOptions,
    ): Promise<core.WithRawResponse<OpenLedgerClient.GetV1TransactionsResponse>> {
        const { entityId, cursor, pageSize } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["entityId"] = entityId;
        if (cursor != null) {
            _queryParams["cursor"] = cursor;
        }

        if (pageSize != null) {
            _queryParams["pageSize"] = pageSize.toString();
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpenLedgerClientEnvironment.Default,
                "v1/transactions",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "openledger",
                "X-Fern-SDK-Version": "1.0.2",
                "User-Agent": "openledger/1.0.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.GetV1TransactionsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new OpenLedgerClient.BadRequestError(_response.error.body, _response.rawResponse);
                case 500:
                    throw new OpenLedgerClient.InternalServerError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.OpenLedgerClientError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpenLedgerClientError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpenLedgerClientTimeoutError("Timeout exceeded when calling GET /v1/transactions.");
            case "unknown":
                throw new errors.OpenLedgerClientError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Creates a new transaction for an entity
     *
     * @param {OpenLedgerClient.PostV1TransactionsRequest} request
     * @param {Transactions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link OpenLedgerClient.BadRequestError}
     * @throws {@link OpenLedgerClient.NotFoundError}
     * @throws {@link OpenLedgerClient.InternalServerError}
     *
     * @example
     *     await client.transactions.createANewTransaction({
     *         entityId: "entityId",
     *         amount: 1.1,
     *         debitAccountId: "debitAccountId",
     *         creditAccountId: "creditAccountId"
     *     })
     */
    public createANewTransaction(
        request: OpenLedgerClient.PostV1TransactionsRequest,
        requestOptions?: Transactions.RequestOptions,
    ): core.HttpResponsePromise<OpenLedgerClient.PostV1TransactionsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__createANewTransaction(request, requestOptions));
    }

    private async __createANewTransaction(
        request: OpenLedgerClient.PostV1TransactionsRequest,
        requestOptions?: Transactions.RequestOptions,
    ): Promise<core.WithRawResponse<OpenLedgerClient.PostV1TransactionsResponse>> {
        const { entityId, ..._body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["entityId"] = entityId;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpenLedgerClientEnvironment.Default,
                "v1/transactions",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "openledger",
                "X-Fern-SDK-Version": "1.0.2",
                "User-Agent": "openledger/1.0.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            body: serializers.PostV1TransactionsRequest.jsonOrThrow(_body, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.PostV1TransactionsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new OpenLedgerClient.BadRequestError(_response.error.body, _response.rawResponse);
                case 404:
                    throw new OpenLedgerClient.NotFoundError(_response.error.body, _response.rawResponse);
                case 500:
                    throw new OpenLedgerClient.InternalServerError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.OpenLedgerClientError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpenLedgerClientError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpenLedgerClientTimeoutError("Timeout exceeded when calling POST /v1/transactions.");
            case "unknown":
                throw new errors.OpenLedgerClientError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Deletes an existing transaction
     *
     * @param {OpenLedgerClient.DeleteV1TransactionsRequest} request
     * @param {Transactions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link OpenLedgerClient.BadRequestError}
     * @throws {@link OpenLedgerClient.NotFoundError}
     * @throws {@link OpenLedgerClient.InternalServerError}
     *
     * @example
     *     await client.transactions.deleteATransaction({
     *         entityId: "entityId",
     *         transactionId: "transactionId"
     *     })
     */
    public deleteATransaction(
        request: OpenLedgerClient.DeleteV1TransactionsRequest,
        requestOptions?: Transactions.RequestOptions,
    ): core.HttpResponsePromise<OpenLedgerClient.DeleteV1TransactionsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__deleteATransaction(request, requestOptions));
    }

    private async __deleteATransaction(
        request: OpenLedgerClient.DeleteV1TransactionsRequest,
        requestOptions?: Transactions.RequestOptions,
    ): Promise<core.WithRawResponse<OpenLedgerClient.DeleteV1TransactionsResponse>> {
        const { entityId, transactionId } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["entityId"] = entityId;
        _queryParams["transactionId"] = transactionId;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpenLedgerClientEnvironment.Default,
                "v1/transactions",
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "openledger",
                "X-Fern-SDK-Version": "1.0.2",
                "User-Agent": "openledger/1.0.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.DeleteV1TransactionsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new OpenLedgerClient.BadRequestError(_response.error.body, _response.rawResponse);
                case 404:
                    throw new OpenLedgerClient.NotFoundError(_response.error.body, _response.rawResponse);
                case 500:
                    throw new OpenLedgerClient.InternalServerError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.OpenLedgerClientError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpenLedgerClientError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpenLedgerClientTimeoutError("Timeout exceeded when calling DELETE /v1/transactions.");
            case "unknown":
                throw new errors.OpenLedgerClientError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Edit an existing transaction by updating its accounts and/or description
     *
     * @param {OpenLedgerClient.PostV1TransactionsEditRequest} request
     * @param {Transactions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link OpenLedgerClient.BadRequestError}
     * @throws {@link OpenLedgerClient.NotFoundError}
     * @throws {@link OpenLedgerClient.InternalServerError}
     *
     * @example
     *     await client.transactions.editATransaction({
     *         id: "id"
     *     })
     */
    public editATransaction(
        request: OpenLedgerClient.PostV1TransactionsEditRequest,
        requestOptions?: Transactions.RequestOptions,
    ): core.HttpResponsePromise<OpenLedgerClient.PostV1TransactionsEditResponse> {
        return core.HttpResponsePromise.fromPromise(this.__editATransaction(request, requestOptions));
    }

    private async __editATransaction(
        request: OpenLedgerClient.PostV1TransactionsEditRequest,
        requestOptions?: Transactions.RequestOptions,
    ): Promise<core.WithRawResponse<OpenLedgerClient.PostV1TransactionsEditResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpenLedgerClientEnvironment.Default,
                "v1/transactions/edit",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "openledger",
                "X-Fern-SDK-Version": "1.0.2",
                "User-Agent": "openledger/1.0.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.PostV1TransactionsEditRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.PostV1TransactionsEditResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new OpenLedgerClient.BadRequestError(_response.error.body, _response.rawResponse);
                case 404:
                    throw new OpenLedgerClient.NotFoundError(_response.error.body, _response.rawResponse);
                case 500:
                    throw new OpenLedgerClient.InternalServerError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.OpenLedgerClientError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpenLedgerClientError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpenLedgerClientTimeoutError(
                    "Timeout exceeded when calling POST /v1/transactions/edit.",
                );
            case "unknown":
                throw new errors.OpenLedgerClientError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Approve pending transactions by posting them to the ledger. Supports both single and batch transaction approval.
     *
     * @param {OpenLedgerClient.PutV1TransactionsApproveRequest} request
     * @param {Transactions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link OpenLedgerClient.BadRequestError}
     * @throws {@link OpenLedgerClient.NotFoundError}
     * @throws {@link OpenLedgerClient.InternalServerError}
     *
     * @example
     *     await client.transactions.approveOneOrMultipleTransactions({
     *         entityId: "entityId",
     *         body: "tx_1234567890abcdef"
     *     })
     */
    public approveOneOrMultipleTransactions(
        request: OpenLedgerClient.PutV1TransactionsApproveRequest,
        requestOptions?: Transactions.RequestOptions,
    ): core.HttpResponsePromise<OpenLedgerClient.PutV1TransactionsApproveResponse> {
        return core.HttpResponsePromise.fromPromise(this.__approveOneOrMultipleTransactions(request, requestOptions));
    }

    private async __approveOneOrMultipleTransactions(
        request: OpenLedgerClient.PutV1TransactionsApproveRequest,
        requestOptions?: Transactions.RequestOptions,
    ): Promise<core.WithRawResponse<OpenLedgerClient.PutV1TransactionsApproveResponse>> {
        const { entityId, body: _body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["entityId"] = entityId;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpenLedgerClientEnvironment.Default,
                "v1/transactions/approve",
            ),
            method: "PUT",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "openledger",
                "X-Fern-SDK-Version": "1.0.2",
                "User-Agent": "openledger/1.0.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            body: serializers.PutV1TransactionsApproveRequestBody.jsonOrThrow(_body, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.PutV1TransactionsApproveResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new OpenLedgerClient.BadRequestError(_response.error.body, _response.rawResponse);
                case 404:
                    throw new OpenLedgerClient.NotFoundError(_response.error.body, _response.rawResponse);
                case 500:
                    throw new OpenLedgerClient.InternalServerError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.OpenLedgerClientError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpenLedgerClientError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpenLedgerClientTimeoutError(
                    "Timeout exceeded when calling PUT /v1/transactions/approve.",
                );
            case "unknown":
                throw new errors.OpenLedgerClientError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve monthly transaction summaries for an entity
     *
     * @param {OpenLedgerClient.GetV1TransactionsByMonthRequest} request
     * @param {Transactions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link OpenLedgerClient.BadRequestError}
     * @throws {@link OpenLedgerClient.InternalServerError}
     *
     * @example
     *     await client.transactions.getTransactionsByMonth({
     *         entityId: "entityId"
     *     })
     */
    public getTransactionsByMonth(
        request: OpenLedgerClient.GetV1TransactionsByMonthRequest,
        requestOptions?: Transactions.RequestOptions,
    ): core.HttpResponsePromise<OpenLedgerClient.GetV1TransactionsByMonthResponseItem[]> {
        return core.HttpResponsePromise.fromPromise(this.__getTransactionsByMonth(request, requestOptions));
    }

    private async __getTransactionsByMonth(
        request: OpenLedgerClient.GetV1TransactionsByMonthRequest,
        requestOptions?: Transactions.RequestOptions,
    ): Promise<core.WithRawResponse<OpenLedgerClient.GetV1TransactionsByMonthResponseItem[]>> {
        const { entityId } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["entityId"] = entityId;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpenLedgerClientEnvironment.Default,
                "v1/transactions/by-month",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "openledger",
                "X-Fern-SDK-Version": "1.0.2",
                "User-Agent": "openledger/1.0.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.transactions.getTransactionsByMonth.Response.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new OpenLedgerClient.BadRequestError(_response.error.body, _response.rawResponse);
                case 500:
                    throw new OpenLedgerClient.InternalServerError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.OpenLedgerClientError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpenLedgerClientError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpenLedgerClientTimeoutError(
                    "Timeout exceeded when calling GET /v1/transactions/by-month.",
                );
            case "unknown":
                throw new errors.OpenLedgerClientError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Assign a category to a transaction
     *
     * @param {OpenLedgerClient.PostV1TransactionsCategorizeRequest} request
     * @param {Transactions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link OpenLedgerClient.BadRequestError}
     * @throws {@link OpenLedgerClient.NotFoundError}
     * @throws {@link OpenLedgerClient.InternalServerError}
     *
     * @example
     *     await client.transactions.categorizeATransaction({
     *         entityId: "entityId",
     *         transactionId: "transactionId",
     *         categoryId: "categoryId"
     *     })
     */
    public categorizeATransaction(
        request: OpenLedgerClient.PostV1TransactionsCategorizeRequest,
        requestOptions?: Transactions.RequestOptions,
    ): core.HttpResponsePromise<OpenLedgerClient.PostV1TransactionsCategorizeResponse> {
        return core.HttpResponsePromise.fromPromise(this.__categorizeATransaction(request, requestOptions));
    }

    private async __categorizeATransaction(
        request: OpenLedgerClient.PostV1TransactionsCategorizeRequest,
        requestOptions?: Transactions.RequestOptions,
    ): Promise<core.WithRawResponse<OpenLedgerClient.PostV1TransactionsCategorizeResponse>> {
        const { entityId, ..._body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["entityId"] = entityId;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpenLedgerClientEnvironment.Default,
                "v1/transactions/categorize",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "openledger",
                "X-Fern-SDK-Version": "1.0.2",
                "User-Agent": "openledger/1.0.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            body: serializers.PostV1TransactionsCategorizeRequest.jsonOrThrow(_body, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.PostV1TransactionsCategorizeResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new OpenLedgerClient.BadRequestError(_response.error.body, _response.rawResponse);
                case 404:
                    throw new OpenLedgerClient.NotFoundError(_response.error.body, _response.rawResponse);
                case 500:
                    throw new OpenLedgerClient.InternalServerError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.OpenLedgerClientError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpenLedgerClientError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpenLedgerClientTimeoutError(
                    "Timeout exceeded when calling POST /v1/transactions/categorize.",
                );
            case "unknown":
                throw new errors.OpenLedgerClientError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Search for transactions using various filters and text search
     *
     * @param {OpenLedgerClient.PostV1TransactionsSearchRequest} request
     * @param {Transactions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link OpenLedgerClient.BadRequestError}
     * @throws {@link OpenLedgerClient.InternalServerError}
     *
     * @example
     *     await client.transactions.searchTransactions({
     *         entityId: "entityId"
     *     })
     */
    public searchTransactions(
        request: OpenLedgerClient.PostV1TransactionsSearchRequest,
        requestOptions?: Transactions.RequestOptions,
    ): core.HttpResponsePromise<OpenLedgerClient.PostV1TransactionsSearchResponse> {
        return core.HttpResponsePromise.fromPromise(this.__searchTransactions(request, requestOptions));
    }

    private async __searchTransactions(
        request: OpenLedgerClient.PostV1TransactionsSearchRequest,
        requestOptions?: Transactions.RequestOptions,
    ): Promise<core.WithRawResponse<OpenLedgerClient.PostV1TransactionsSearchResponse>> {
        const { entityId, ..._body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["entityId"] = entityId;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpenLedgerClientEnvironment.Default,
                "v1/transactions/search",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "openledger",
                "X-Fern-SDK-Version": "1.0.2",
                "User-Agent": "openledger/1.0.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            body: serializers.PostV1TransactionsSearchRequest.jsonOrThrow(_body, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.PostV1TransactionsSearchResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new OpenLedgerClient.BadRequestError(_response.error.body, _response.rawResponse);
                case 500:
                    throw new OpenLedgerClient.InternalServerError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.OpenLedgerClientError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpenLedgerClientError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpenLedgerClientTimeoutError(
                    "Timeout exceeded when calling POST /v1/transactions/search.",
                );
            case "unknown":
                throw new errors.OpenLedgerClientError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Interact with transactions using natural language
     *
     * @param {OpenLedgerClient.GetV1TransactionsChatRequest} request
     * @param {Transactions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link OpenLedgerClient.BadRequestError}
     * @throws {@link OpenLedgerClient.InternalServerError}
     *
     * @example
     *     await client.transactions.chatWithTransactions({
     *         entityId: "entityId",
     *         prompt: "prompt"
     *     })
     */
    public chatWithTransactions(
        request: OpenLedgerClient.GetV1TransactionsChatRequest,
        requestOptions?: Transactions.RequestOptions,
    ): core.HttpResponsePromise<OpenLedgerClient.GetV1TransactionsChatResponse> {
        return core.HttpResponsePromise.fromPromise(this.__chatWithTransactions(request, requestOptions));
    }

    private async __chatWithTransactions(
        request: OpenLedgerClient.GetV1TransactionsChatRequest,
        requestOptions?: Transactions.RequestOptions,
    ): Promise<core.WithRawResponse<OpenLedgerClient.GetV1TransactionsChatResponse>> {
        const { entityId, prompt, history, contextData, customPrompt, stream } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["entityId"] = entityId;
        _queryParams["prompt"] = prompt;
        if (history != null) {
            _queryParams["history"] = history;
        }

        if (contextData != null) {
            _queryParams["contextData"] = contextData;
        }

        if (customPrompt != null) {
            _queryParams["customPrompt"] = customPrompt;
        }

        if (stream != null) {
            _queryParams["stream"] = stream;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpenLedgerClientEnvironment.Default,
                "v1/transactions/chat",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "openledger",
                "X-Fern-SDK-Version": "1.0.2",
                "User-Agent": "openledger/1.0.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.GetV1TransactionsChatResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new OpenLedgerClient.BadRequestError(_response.error.body, _response.rawResponse);
                case 500:
                    throw new OpenLedgerClient.InternalServerError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.OpenLedgerClientError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpenLedgerClientError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpenLedgerClientTimeoutError(
                    "Timeout exceeded when calling GET /v1/transactions/chat.",
                );
            case "unknown":
                throw new errors.OpenLedgerClientError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get all counterparties for an entity with their transaction history and aggregated data
     *
     * @param {OpenLedgerClient.GetV1TransactionsCounterpartiesRequest} request
     * @param {Transactions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link OpenLedgerClient.BadRequestError}
     * @throws {@link OpenLedgerClient.InternalServerError}
     *
     * @example
     *     await client.transactions.getEntityCounterparties({
     *         entityId: "entityId"
     *     })
     */
    public getEntityCounterparties(
        request: OpenLedgerClient.GetV1TransactionsCounterpartiesRequest,
        requestOptions?: Transactions.RequestOptions,
    ): core.HttpResponsePromise<OpenLedgerClient.GetV1TransactionsCounterpartiesResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getEntityCounterparties(request, requestOptions));
    }

    private async __getEntityCounterparties(
        request: OpenLedgerClient.GetV1TransactionsCounterpartiesRequest,
        requestOptions?: Transactions.RequestOptions,
    ): Promise<core.WithRawResponse<OpenLedgerClient.GetV1TransactionsCounterpartiesResponse>> {
        const { entityId, cursor, pageSize } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["entityId"] = entityId;
        if (cursor != null) {
            _queryParams["cursor"] = cursor;
        }

        if (pageSize != null) {
            _queryParams["pageSize"] = pageSize.toString();
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpenLedgerClientEnvironment.Default,
                "v1/transactions/counterparties",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "openledger",
                "X-Fern-SDK-Version": "1.0.2",
                "User-Agent": "openledger/1.0.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.GetV1TransactionsCounterpartiesResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new OpenLedgerClient.BadRequestError(_response.error.body, _response.rawResponse);
                case 500:
                    throw new OpenLedgerClient.InternalServerError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.OpenLedgerClientError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpenLedgerClientError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpenLedgerClientTimeoutError(
                    "Timeout exceeded when calling GET /v1/transactions/counterparties.",
                );
            case "unknown":
                throw new errors.OpenLedgerClientError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
