/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as OpenLedgerClient from "../../../index";
import * as serializers from "../../../../serialization/index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Sandbox {
    export interface Options {
        environment?: core.Supplier<environments.OpenLedgerClientEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Sandbox {
    constructor(protected readonly _options: Sandbox.Options = {}) {}

    /**
     * Creates a complete sandbox environment for development and testing, including a developer account, workspace, instance, entity, ledger structure, and Plaid sandbox bank connections.
     *
     * @param {OpenLedgerClient.SandboxRequest} request
     * @param {Sandbox.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link OpenLedgerClient.BadRequestError}
     * @throws {@link OpenLedgerClient.InternalServerError}
     *
     * @example
     *     await client.sandbox.createSandboxEnvironment({
     *         name: "name",
     *         developerId: "developer_id"
     *     })
     */
    public createSandboxEnvironment(
        request: OpenLedgerClient.SandboxRequest,
        requestOptions?: Sandbox.RequestOptions,
    ): core.HttpResponsePromise<OpenLedgerClient.SandboxResponse> {
        return core.HttpResponsePromise.fromPromise(this.__createSandboxEnvironment(request, requestOptions));
    }

    private async __createSandboxEnvironment(
        request: OpenLedgerClient.SandboxRequest,
        requestOptions?: Sandbox.RequestOptions,
    ): Promise<core.WithRawResponse<OpenLedgerClient.SandboxResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpenLedgerClientEnvironment.Default,
                "sandbox",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@openledger/typescript-sdk",
                "X-Fern-SDK-Version": "0.0.35",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.SandboxRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.SandboxResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new OpenLedgerClient.BadRequestError(_response.error.body, _response.rawResponse);
                case 500:
                    throw new OpenLedgerClient.InternalServerError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.OpenLedgerClientError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpenLedgerClientError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpenLedgerClientTimeoutError("Timeout exceeded when calling POST /sandbox.");
            case "unknown":
                throw new errors.OpenLedgerClientError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
