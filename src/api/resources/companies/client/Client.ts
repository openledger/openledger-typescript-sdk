/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as OpenLedgerClient from "../../../index";
import * as serializers from "../../../../serialization/index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Companies {
    interface Options {
        environment?: core.Supplier<environments.OpenLedgerClientEnvironment | string>;
        token: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
    }

    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}

/**
 * Company management endpoints
 */
export class Companies {
    constructor(protected readonly _options: Companies.Options) {}

    /**
     * @param {OpenLedgerClient.CreateCompanyRequest} request
     * @param {Companies.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.companies.createCompany()
     */
    public async createCompany(
        request: OpenLedgerClient.CreateCompanyRequest = {},
        requestOptions?: Companies.RequestOptions
    ): Promise<Record<string, unknown>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ??
                    environments.OpenLedgerClientEnvironment.Default,
                "companies"
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "openledger",
                "X-Fern-SDK-Version": "1.0.2",
                "User-Agent": "openledger/1.0.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.CreateCompanyRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.companies.createCompany.Response.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpenLedgerClientError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpenLedgerClientError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.OpenLedgerClientTimeoutError();
            case "unknown":
                throw new errors.OpenLedgerClientError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {string} id - Company ID
     * @param {Companies.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.companies.getCompany("id")
     */
    public async getCompany(id: string, requestOptions?: Companies.RequestOptions): Promise<Record<string, unknown>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ??
                    environments.OpenLedgerClientEnvironment.Default,
                `${encodeURIComponent(id)}/company`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "openledger",
                "X-Fern-SDK-Version": "1.0.2",
                "User-Agent": "openledger/1.0.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.companies.getCompany.Response.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpenLedgerClientError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpenLedgerClientError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.OpenLedgerClientTimeoutError();
            case "unknown":
                throw new errors.OpenLedgerClientError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {string} id - Company ID
     * @param {Record<string, unknown>} request
     * @param {Companies.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.companies.updateCompany("id", {
     *         "key": "value"
     *     })
     */
    public async updateCompany(
        id: string,
        request: Record<string, unknown>,
        requestOptions?: Companies.RequestOptions
    ): Promise<Record<string, unknown>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ??
                    environments.OpenLedgerClientEnvironment.Default,
                `${encodeURIComponent(id)}/company`
            ),
            method: "PUT",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "openledger",
                "X-Fern-SDK-Version": "1.0.2",
                "User-Agent": "openledger/1.0.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.companies.updateCompany.Request.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.companies.updateCompany.Response.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpenLedgerClientError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpenLedgerClientError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.OpenLedgerClientTimeoutError();
            case "unknown":
                throw new errors.OpenLedgerClientError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {string} id - Company ID
     * @param {Companies.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.companies.deleteCompany("id")
     */
    public async deleteCompany(id: string, requestOptions?: Companies.RequestOptions): Promise<void> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ??
                    environments.OpenLedgerClientEnvironment.Default,
                `${encodeURIComponent(id)}/company`
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "openledger",
                "X-Fern-SDK-Version": "1.0.2",
                "User-Agent": "openledger/1.0.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpenLedgerClientError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpenLedgerClientError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.OpenLedgerClientTimeoutError();
            case "unknown":
                throw new errors.OpenLedgerClientError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
